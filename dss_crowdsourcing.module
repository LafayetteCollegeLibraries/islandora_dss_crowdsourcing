<?php

  /**
   * @file Core functionality for the crowdsourcing Module
   * @author griffinj@lafayette.edu
   *
   */

require_once dirname(__FILE__) . '/theme/theme.inc';

/**
 * Implements hook_islandora_xml_form_builder_form_associations().
 */
function dss_crowdsourcing_islandora_xml_form_builder_form_associations() {
  return array('islandora_book_mods_form_crowdsourcing' => array('content_model' => 'islandora:bookCModel',
								 'form_name' => 'Islandora Book MODS Form (Crowdsourcing)',
								 'dsid' => 'MODS',
								 'title_field' => array('titleInfo', 'title'),
								 'transform' => 'mods_to_dc.xsl',
								 'template' => FALSE,
								 ),
	       'islandora_large_image_mods_form_crowdsourcing' => array('content_model' => 'islandora:sp_large_image_cmodel',
									'form_name' => 'Islandora Large Image MODS Form (Crowdsourcing)',
									'dsid' => 'MODS',
									'title_field' => array('titleInfo', 'title'),
									'transform' => 'mods_to_dc.xsl',
									'template' => FALSE,
									),
	       );
}

/**
 * Implements hook_islandora_xml_form_builder_forms().
 */
function dss_crowdsourcing_islandora_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'dss_crowdsourcing');
  return array('Islandora Book MODS Form (Crowdsourcing)' => array('form_file' => "$module_path/xml/islandora_book_mods_form_crowdsourcing.xml"),
	       'Islandora Large Image MODS Form (Crowdsourcing)' => array('form_file' => "$module_path/xml/islandora_large_image_mods_form_crowdsourcing.xml"),
	       );
}

/**
 * Function for saving metadata crowdsourcing form submissions.
 * @param $form
 * @param $form_state
 *
 */

define('XMLNS_XML_NS', ' http://www.w3.org/2000/xmlns/');
define('HTML_XML_NS', 'http://www.w3.org/1999/xhtml');
define('MODS_3_XSD_URI', 'http://www.loc.gov/standards/mods/v3/mods-3-5.xsd');

function dss_crowdsourcing_metadata_save($form, $form_state, $mods_doc) {

  // Retrieve the Object
  $object_id = $form_state['values']['id'];
  $object = islandora_object_load($object_id);

  // Retrieve the MODS Document for the Object
  $mods_ds = $object['MODS'];

  $mods_ds->content = $mods_doc->asXML();
}

function dss_crowdsourcing_metadata_validate($mods_doc, $mods_xsd_uri = MODS_3_XSD_URI) {
  
  $doc = new DomDocument('1.0');
  $doc->loadXML($mods_doc->asXML());

  dpm($doc->saveXml());

  // @todo Resolve issues related to warnings raised for <note> Elements
  //return $doc->schemaValidate($mods_xsd_uri);
  return TRUE;
}

function dss_crowdsourcing_metadata_transform($form, $form_state) {

  // Retrieve the Object
  $object_id = $form_state['values']['id'];
  $object = islandora_object_load($object_id);

  // Retrieve the MODS Document for the Object
  $mods_ds = $object['MODS'];
  if(isset($mods_ds)) {

    $mods_str = $mods_ds->content;
    $mods_doc = new SimpleXMLElement($mods_str);

    // Ensure that the HTML namespace exists within the Document
    $namespaces = $mods_doc->getNamespaces(TRUE);

    // If it does not exist, add it to the DOM
    if(!in_array(HTML_XML_NS, array_values($namespaces))) {

      //$mods_doc->addAttribute('xmlns:html', HTML_XML_NS, XMLNS_XML_NS);
      $_mods_doc = new DOMDocument('1.0');
      $_mods_doc->loadXML($mods_doc->asXML());
      $_mods_root = $_mods_doc->documentElement;
      $_mods_root->setAttribute('xmlns:xhtml', HTML_XML_NS);
      $mods_doc = new SimpleXMLElement($_mods_doc->saveXML());
    }
  } else {

    // If the MODS Document does not exist for the Object, instantiate the Document
    $mods_doc = new SimpleXMLElement('<mods xmlns="http://www.loc.gov/mods/v3" xmlns:mods="http://www.loc.gov/mods/v3" xmlns:xhtml="' . HTML_XML_NS . '" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">');
  }

  // @todo Review and restructure
  //$note_content = '<div class="crowdsourced-content-header"><p>Submitted by ' . $form_state['values']['name'] . '(' . $form_state['values']['mail'] . ') on ' . $form_state['values']['date'] . '</p></div><div class="crowdsourced-content-body">' . $form_state['values']['content_metadata']['value'] . '</div>';
  $note = $mods_doc->addChild('note');
  $note->addAttribute('type', 'crowdsourced-content');

  // @todo Refactor
  $header = $note->addChild('div', NULL, HTML_XML_NS);
  $header->addAttribute('class', 'crowdsourced-content-header');
  $header_content = 'Submitted by ' . $form_state['values']['name'] . ' (' . $form_state['values']['mail'] . ') on ' . $form_state['values']['date'];
  $header_p = $header->addChild('p', $header_content);

  // @todo Refactor
  $body = $note->addChild('div', NULL, HTML_XML_NS);
  $body->addAttribute('class', 'crowdsourced-content-body');

  // @todo Ensure that Drupal is sanitizing this input, or issue a warning for non-filtered input
  $body_p = new SimpleXMLElement($form_state['values']['content_metadata']['value']);
  $body->p = $body_p;

  return $mods_doc;
}

/**
 * Process comment form submissions; prepare the comment, store it, and set a redirection target.
 * @param $form
 * @param $form_state
 *
 * @see comment_form_submit().
 */
function dss_crowdsourcing_form_submit($form, &$form_state) {

  //$node = node_load($form_state['values']['nid']);
  //$comment = comment_form_submit_build_comment($form, $form_state);

  $object = $form['#object'];
  //if (user_access('post comments') && (user_access('administer comments') || $node->comment == COMMENT_NODE_OPEN)) {
  if (user_access('post comments') && (user_access('administer comments'))) {
    // Save the anonymous user information to a cookie for reuse.
    if (user_is_anonymous()) {
      user_cookie_save(array_intersect_key($form_state['values'], array_flip(array('name', 'mail', 'homepage'))));
    }

    //comment_save($comment);

    $mods_doc = $form_state['mods_doc'];
    dss_crowdsourcing_metadata_save($form, $form_state, $mods_doc);

    //$form_state['values']['cid'] = $comment->cid;

    // Add an entry to the watchdog log.
    //watchdog('content', 'Comment posted: %subject.', array('%subject' => $comment->subject), WATCHDOG_NOTICE, l(t('view'), 'comment/' . $comment->cid, array('fragment' => 'comment-' . $comment->cid)));

    // Explain the approval queue if necessary.
    /*
    if ($comment->status == COMMENT_NOT_PUBLISHED) {
      if (!user_access('administer comments')) {
        drupal_set_message(t('Your comment has been queued for review by site administrators and will be published after approval.'));
      }
    }
    else {
      drupal_set_message(t('Your comment has been posted.'));
    }
    */
    drupal_set_message(t('Your information has been submitted for review by site administrators and will be published after approval.'));

    /*
    $query = array();
    // Find the current display page for this comment.
    $page = comment_get_display_page($comment->cid, $node->type);
    if ($page > 0) {
      $query['page'] = $page;
    }
    */

    // Redirect to the newly posted comment.
    //$redirect = array('node/' . $node->nid, array('query' => $query, 'fragment' => 'comment-' . $comment->cid));
    $redirect = 'islandora/object/' . $object->id;
  }
  else {

    watchdog('content', 'Comment: unauthorized comment submitted or comment submitted to a closed post %subject.', array('%subject' => $comment->subject), WATCHDOG_WARNING);
    drupal_set_message(t('Comment: unauthorized comment submitted or comment submitted to a closed post %subject.', array('%subject' => $comment->subject)), 'error');

    // Redirect the user to the node they are commenting on.
    //$redirect = 'node/' . $node->nid;
    $redirect = 'islandora/object/' . $object->id;
  }

  $form_state['redirect'] = $redirect;

  // Clear the block and page caches so that anonymous users see the comment
  // they have posted.
  cache_clear_all();
}

/**
 * Validate comment form submissions.
 * @param array $form
 * @param array $form_state
 *
 * @see comment_form_validate().
 */
function dss_crowdsourcing_form_validate($form, &$form_state) {

  global $user;

  //entity_form_field_validate('comment', $form, $form_state);

  if($form_state['values']['is_anonymous']) {

    // Verify the name in case it is being changed from being anonymous.
    $account = user_load_by_name($form_state['values']['name']);
    $form_state['values']['uid'] = $account ? $account->uid : 0;

    // Disabling in the name of conserving time
    // @todo Implement or refactor
    /*
    if ($form_state['values']['date'] && strtotime($form_state['values']['date']) === FALSE) {

      form_set_error('date', t('You have to specify a valid date.'));
    }
    */
    if ($form_state['values']['name'] && !$form_state['values']['is_anonymous'] && !$account) {
      form_set_error('name', t('You have to specify a valid author.'));
    }
  } else {

    // Validate anonymous comment author fields (if given). If the (original)
    // author of this comment was an anonymous user, verify that no registered
    // user with this name exists.
    if ($form_state['values']['name']) {
      $query = db_select('users', 'u');
      $query->addField('u', 'uid', 'uid');
      $taken = $query
        ->condition('name', db_like($form_state['values']['name']), 'LIKE')
        ->countQuery()
        ->execute()
        ->fetchField();
      if ($taken) {
        form_set_error('name', t('The name you used belongs to a registered user.'));
      }
    }
  }
  if ($form_state['values']['mail'] && !valid_email_address($form_state['values']['mail'])) {
    form_set_error('mail', t('The e-mail address you specified is not valid.'));
  }

  // XML Validation for the MODS Form
  $mods_doc = dss_crowdsourcing_metadata_transform($form, $form_state);
  if(!dss_crowdsourcing_metadata_validate($mods_doc, $mods_xsd_uri = MODS_3_XSD_URI)) {

    form_set_error('content_metadata', t('The information submitted contained improperly-structured HTML.  Please correct the structure of the markup and submit again.'));
  }

  // Store the document for the form submission
  // @todo Refactor?
  $form_state['mods_doc'] = $mods_doc;
}

/**
 * The form for capturing metadata from the general user
 * @see comment_form()
 * @see dss_crowdsourcing_form_validate()
 * @see dss_crowdsourcing_form_submit()
 * @ingroup forms
 *
 */
function dss_crowdsourcing_gis_form($form, &$form_state, $object) {

  
}

/**
 * The form for capturing metadata from the general user
 * @see comment_form()
 * @see dss_crowdsourcing_form_validate()
 * @see dss_crowdsourcing_form_submit()
 * @ingroup forms
 *
 */
function dss_crowdsourcing_form($form, &$form_state, $object) {

  global $user;

  // During initial form build, add the object entity to the form state for
  // use during form building and processing. During a rebuild, use what is in
  // the form state.
  if (!isset($form_state['object'])) {
    $defaults = array(
      'name' => '',
      'mail' => '',
      'homepage' => '',
      'subject' => '',
      'object' => '',
      'cid' => NULL,
      'pid' => NULL,
      'object_pid' => NULL, //
      'language' => LANGUAGE_NONE,
      'uid' => 0,
    );
    foreach ($defaults as $key => $value) {
      if (!isset($object->$key)) {
        $object->$key = $value;
      }
    }
    $form_state['object'] = $object;
  }
  else {
    $object = $form_state['object'];
  }

  //$node = node_load($object->nid);
  //$form['#node'] = $node;
  $object = islandora_object_load($object->object_pid);
  $form['#object'] = $object;

  // Use #comment-form as unique jump target, regardless of node type.
  $form['#id'] = drupal_html_id('comment_form');
  $form['#attributes']['class'][] = 'comment-form';
  //$form['#theme'] = array('comment_form__node_' . $node->type, 'comment_form');
  // @todo Construct a suggestion using the Object's Content Model

  //$anonymous_contact = variable_get('comment_anonymous_' . $node->type, COMMENT_ANONYMOUS_MAYNOT_CONTACT);
  //$is_admin = (!empty($comment->cid) && user_access('administer comments'));
  // @todo Extend functionality for the administration of crowd-sourced metadata
  $is_admin = user_access('administer comments');

  //if (!$user->uid && $anonymous_contact != COMMENT_ANONYMOUS_MAYNOT_CONTACT) {
  if (!$user->uid) {
    $form['#attached']['library'][] = array('system', 'jquery.cookie');
    $form['#attributes']['class'][] = 'user-info-from-cookie';
  }

  /**
   * @todo Implement threading
   *
   */
  /*
  // If not replying to a comment, use our dedicated page callback for new
  // comments on nodes.
  if (empty($comment->cid) && empty($comment->pid)) {
    $form['#action'] = url('comment/reply/' . $comment->nid);
  }
  */

  /**
   * @todo Implement preview functionality
   * Resolves SYR-2
   */
  /*
  if (isset($form_state['comment_preview'])) {
    $form += $form_state['comment_preview'];
  }
  */

  // Display author information in a fieldset for comment moderators.
  if ($is_admin) {
    $form['author'] = array(
      '#type' => 'fieldset',
      '#title' => t('Contribute to this Description'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => -2,
    );
  }
  else {
    // Sets the author form elements above the subject.
    $form['author'] = array(
      '#weight' => -2,
    );
  }

  // Prepare default values for form elements.
  /*
  if ($is_admin) {
    $author = (!$comment->uid && $comment->name ? $comment->name : $comment->registered_name);
    $status = (isset($comment->status) ? $comment->status : COMMENT_NOT_PUBLISHED);
    $date = (!empty($comment->date) ? $comment->date : format_date($comment->created, 'custom', 'Y-m-d H:i O'));
  }
  else {
  */
  // @todo Extend functionality for user names
  if(!$is_admin) {

    if ($user->uid) {
      $author = $user->name;
    }
    else {
      //$author = ($comment->name ? $comment->name : '');
      $author = ($object->owner ? $object->owner : '');
    }
    $status = (user_access('skip comment approval') ? COMMENT_PUBLISHED : COMMENT_NOT_PUBLISHED);
    $date = '';
  } else {

    $author = $user->name;

    // @todo Extend functionality for comment status
    $status = ($object->state == 'A' ? COMMENT_PUBLISHED : COMMENT_NOT_PUBLISHED);
    $date = $object->lastModifiedDate;
  }

  // Add the author name field depending on the current user.
  if ($is_admin) {
    $form['author']['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Authored by'),
      '#default_value' => $author,
      '#maxlength' => 60,
      '#size' => 30,
      '#description' => t('Leave blank for %anonymous.', array('%anonymous' => variable_get('anonymous', t('Anonymous')))),
      '#autocomplete_path' => 'user/autocomplete',
    );
  }
  elseif ($user->uid) {
    $form['author']['_author'] = array(
      '#type' => 'item',
      '#title' => t('Your name'),
      '#markup' => theme('username', array('account' => $user)),
    );
    $form['author']['name'] = array(
      '#type' => 'value',
      '#value' => $author,
    );
  }
  else {
    $form['author']['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Your name'),
      '#default_value' => $author,
      //'#required' => (!$user->uid && $anonymous_contact == COMMENT_ANONYMOUS_MUST_CONTACT),
      '#required' => (!$user->uid ),
      '#maxlength' => 60,
      '#size' => 30,
    );
  }

  // Add author e-mail and homepage fields depending on the current user.
  $form['author']['mail'] = array(
    '#type' => 'textfield',
    '#title' => t('E-mail'),
    //'#default_value' => $comment->mail,
    //'#default_value' => $user->mail, // Prefer to use the e-mail of the currently authenticated user
    '#default_value' => '', // Prefer to use the e-mail of the currently authenticated user
    //'#required' => (!$user->uid && $anonymous_contact == COMMENT_ANONYMOUS_MUST_CONTACT),
    '#required' => (!$user->uid),
    '#maxlength' => 64,
    '#size' => 30,
    '#description' => t('The content of this field is kept private and will not be shown publicly.'),
    //'#access' => $is_admin || (!$user->uid && $anonymous_contact != COMMENT_ANONYMOUS_MAYNOT_CONTACT),
    '#access' => $is_admin || !$user->uid,
  );

  /*
  $form['author']['homepage'] = array(
    '#type' => 'textfield',
    '#title' => t('Homepage'),
    '#default_value' => $comment->homepage,
    '#maxlength' => 255,
    '#size' => 30,
    '#access' => $is_admin || (!$user->uid && $anonymous_contact != COMMENT_ANONYMOUS_MAYNOT_CONTACT),
  );
  */

  // Add administrative comment publishing options.
  $form['author']['date'] = array(
    '#type' => 'textfield',
    '#title' => t('Authored on'),
    '#default_value' => $date,
    '#maxlength' => 25,
    '#size' => 20,
    '#access' => $is_admin,
  );

  /*
  $form['author']['status'] = array(
    '#type' => 'radios',
    '#title' => t('Status'),
    '#default_value' => $status,
    '#options' => array(
      COMMENT_PUBLISHED => t('Published'),
      COMMENT_NOT_PUBLISHED => t('Not published'),
    ),
    '#access' => $is_admin,
  );
  */

  // @todo Resolve for tagging with comment subjects (?)
  /*
  $form['subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#maxlength' => 64,
    '#default_value' => $comment->subject,
    '#access' => variable_get('comment_subject_field_' . $node->type, 1) == 1,
    '#access' => 1,
    '#weight' => -1,
  );
  */

  // Disable anonymous attempts to submit metadata
  /*
  // Used for conditional validation of author fields.
  $form['is_anonymous'] = array(
    '#type' => 'value',
    '#value' => ($comment->cid ? !$comment->uid : !$user->uid),
  );
  */
  $form['is_anonymous'] = array('#type' => 'value',
				'#value' => user_is_logged_in(),
				);

  /*
  // Add internal comment properties.
  foreach (array('cid', 'pid', 'nid', 'language', 'uid') as $key) {
    $form[$key] = array('#type' => 'value', '#value' => $comment->$key);
  }
  $form['node_type'] = array('#type' => 'value', '#value' => 'comment_node_' . $node->type);
  */

  // @todo Extend for the handling of Islandora Objects with multiple Content Models
  foreach (array('id') as $key) {
    $form[$key] = array('#type' => 'value', '#value' => $object->$key);
  }
  $form['object_type'] = array('#type' => 'value', '#value' => 'comment_object_' . $object->models[0]);

  // Only show the save button if comment previews are optional or if we are
  // already previewing the submission.
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    //'#access' => ($comment->cid && user_access('administer comments')) || variable_get('comment_preview_' . $node->type, DRUPAL_OPTIONAL) != DRUPAL_REQUIRED || isset($form_state['comment_preview']),
    // @todo Extend for user permissions
    '#access' => TRUE,
    '#weight' => 19,
  );

  /**
   * @todo Implement preview functionality
   * Resolves SYR-2
   */
  /*
  $form['actions']['preview'] = array(
    '#type' => 'submit',
    '#value' => t('Preview'),
    '#access' => (variable_get('comment_preview_' . $node->type, DRUPAL_OPTIONAL) != DRUPAL_DISABLED),
    '#weight' => 20,
    '#submit' => array('comment_form_build_preview'),
  );
  */

  // Attach fields.
  /*
  $comment->node_type = 'comment_node_' . $node->type;
  $langcode = entity_language('comment', $comment);
  field_attach_form('comment', $comment, $form, $form_state, $langcode);
  */

  /*
  $comment->object_type = 'comment_node_' . $node->type;
  $langcode = entity_language('islandora_object', $object);
  field_attach_form('islandora_object', $comment, $form, $form_state, $langcode);
  */

  $content_metadata_type = module_exists('wysiwyg') ? 'text_format' : 'textarea';
  $form['content_metadata'] = array('#title' => t('Annotation'),
				    '#type' => 'text_format',
				    '#description' => t('Please provide information for this image.'));

  return $form;
}

/**
 * Implements hook_theme_registry_alter().
 * @see islandora_large_image_theme_registry_alter().
 */

function dss_crowdsourcing_theme_registry_alter(&$theme_registry) {

  //$theme_registry['islandora_large_image']['path'] = drupal_get_path('module', 'dss_crowdsourcing');

  //$theme_registry['islandora_large_image']['template'] = drupal_get_path('module', 'dss_crowdsourcing') . '/theme/islandora-large-image';

  //$theme_registry['islandora_large_image']['template'] = 'islandora-large-image';
  //$theme_registry['islandora_large_image']['theme paths'][] = drupal_get_path('module', 'dss_crowdsourcing') . '/theme';
}

function dss_crowdsourcing_theme() {

  $items = array();

  /*
  return array(
    'islandora_large_image' => array(
      'template' => 'theme/islandora-large-image',
      /**
       * We can add pids to the end of this pattern in our preprocess function and templates
       * will be able to have have a pid appended to the template name to overide a template on a per object basis
       * an example template would be named islandora-basic-image--islandora-27.tpl.phps
       * /
      'pattern' => 'islandora_large_image__',
      'variables' => array('islandora_object' => NULL),
    ),
  );
   */

  /*
  $items['user_pass'] = array('template' => 'user-pass',
			      'preprocess functions' => array(
							      'yourtheme_preprocess_user_pass'
							      ),
			      );
  */

  return $items;
}

